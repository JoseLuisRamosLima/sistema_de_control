import{a as p}from"./chunk-DWVGMGVC.js";import{b as a,f as o,g as r,i as s}from"./chunk-IFOPAOBF.js";var E=a((g,u)=>{r();s();var v=p();u.exports=v.satisfies(o.version,">=15.7.0")});var h=a((I,w)=>{r();s();var A=p();w.exports=A.satisfies(o.version,">=16.9.0")});var _=a((L,y)=>{r();s();var R=E(),$=h(),q={ec:["ES256","ES384","ES512"],rsa:["RS256","PS256","RS384","PS384","RS512","PS512"],"rsa-pss":["PS256","PS384","PS512"]},T={ES256:"prime256v1",ES384:"secp384r1",ES512:"secp521r1"};y.exports=function(e,n){if(!e||!n)return;let t=n.asymmetricKeyType;if(!t)return;let i=q[t];if(!i)throw new Error(`Unknown key type "${t}".`);if(!i.includes(e))throw new Error(`"alg" parameter for "${t}" key type must be one of: ${i.join(", ")}.`);if(R)switch(t){case"ec":let P=n.asymmetricKeyDetails.namedCurve,S=T[e];if(P!==S)throw new Error(`"alg" parameter "${e}" requires curve "${S}".`);break;case"rsa-pss":if($){let c=parseInt(e.slice(-3),10),{hashAlgorithm:f,mgf1HashAlgorithm:d,saltLength:l}=n.asymmetricKeyDetails;if(f!==`sha${c}`||d!==f)throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of "alg" ${e}.`);if(l!==void 0&&l>c>>3)throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of "alg" ${e}.`)}break}}});export{_ as a};
//# sourceMappingURL=chunk-K3PZSXDU.js.map
