{
  "version": 3,
  "sources": ["../node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js", "../node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js", "../node_modules/jsonwebtoken/lib/validateAsymmetricKey.js"],
  "sourcesContent": ["const semver = require('semver');\n\nmodule.exports = semver.satisfies(process.version, '>=15.7.0');\n", "const semver = require('semver');\n\nmodule.exports = semver.satisfies(process.version, '>=16.9.0');\n", "const ASYMMETRIC_KEY_DETAILS_SUPPORTED = require('./asymmetricKeyDetailsSupported');\nconst RSA_PSS_KEY_DETAILS_SUPPORTED = require('./rsaPssKeyDetailsSupported');\n\nconst allowedAlgorithmsForKeys = {\n  'ec': ['ES256', 'ES384', 'ES512'],\n  'rsa': ['RS256', 'PS256', 'RS384', 'PS384', 'RS512', 'PS512'],\n  'rsa-pss': ['PS256', 'PS384', 'PS512']\n};\n\nconst allowedCurves = {\n  ES256: 'prime256v1',\n  ES384: 'secp384r1',\n  ES512: 'secp521r1',\n};\n\nmodule.exports = function(algorithm, key) {\n  if (!algorithm || !key) return;\n\n  const keyType = key.asymmetricKeyType;\n  if (!keyType) return;\n\n  const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];\n\n  if (!allowedAlgorithms) {\n    throw new Error(`Unknown key type \"${keyType}\".`);\n  }\n\n  if (!allowedAlgorithms.includes(algorithm)) {\n    throw new Error(`\"alg\" parameter for \"${keyType}\" key type must be one of: ${allowedAlgorithms.join(', ')}.`)\n  }\n\n  /*\n   * Ignore the next block from test coverage because it gets executed\n   * conditionally depending on the Node version. Not ignoring it would\n   * prevent us from reaching the target % of coverage for versions of\n   * Node under 15.7.0.\n   */\n  /* istanbul ignore next */\n  if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) {\n    switch (keyType) {\n    case 'ec':\n      const keyCurve = key.asymmetricKeyDetails.namedCurve;\n      const allowedCurve = allowedCurves[algorithm];\n\n      if (keyCurve !== allowedCurve) {\n        throw new Error(`\"alg\" parameter \"${algorithm}\" requires curve \"${allowedCurve}\".`);\n      }\n      break;\n\n    case 'rsa-pss':\n      if (RSA_PSS_KEY_DETAILS_SUPPORTED) {\n        const length = parseInt(algorithm.slice(-3), 10);\n        const { hashAlgorithm, mgf1HashAlgorithm, saltLength } = key.asymmetricKeyDetails;\n\n        if (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm) {\n          throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of \"alg\" ${algorithm}.`);\n        }\n\n        if (saltLength !== undefined && saltLength > length >> 3) {\n          throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of \"alg\" ${algorithm}.`)\n        }\n      }\n      break;\n    }\n  }\n}\n"],
  "mappings": "qGAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,CAAAC,IAAAC,IAAA,IAAMC,EAAS,IAEfH,EAAO,QAAUG,EAAO,UAAUC,EAAQ,QAAS,UAAU,ICF7D,IAAAC,EAAAC,EAAA,CAAAC,EAAAC,IAAA,CAAAC,IAAAC,IAAA,IAAMC,EAAS,IAEfH,EAAO,QAAUG,EAAO,UAAUC,EAAQ,QAAS,UAAU,ICF7D,IAAAC,EAAAC,EAAA,CAAAC,EAAAC,IAAA,CAAAC,IAAAC,IAAA,IAAMC,EAAmC,IACnCC,EAAgC,IAEhCC,EAA2B,CAC/B,GAAM,CAAC,QAAS,QAAS,OAAO,EAChC,IAAO,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,OAAO,EAC5D,UAAW,CAAC,QAAS,QAAS,OAAO,CACvC,EAEMC,EAAgB,CACpB,MAAO,aACP,MAAO,YACP,MAAO,WACT,EAEAN,EAAO,QAAU,SAASO,EAAWC,EAAK,CACxC,GAAI,CAACD,GAAa,CAACC,EAAK,OAExB,IAAMC,EAAUD,EAAI,kBACpB,GAAI,CAACC,EAAS,OAEd,IAAMC,EAAoBL,EAAyBI,CAAO,EAE1D,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,qBAAqBD,KAAW,EAGlD,GAAI,CAACC,EAAkB,SAASH,CAAS,EACvC,MAAM,IAAI,MAAM,wBAAwBE,+BAAqCC,EAAkB,KAAK,IAAI,IAAI,EAU9G,GAAIP,EACF,OAAQM,EAAS,CACjB,IAAK,KACH,IAAME,EAAWH,EAAI,qBAAqB,WACpCI,EAAeN,EAAcC,CAAS,EAE5C,GAAII,IAAaC,EACf,MAAM,IAAI,MAAM,oBAAoBL,sBAA8BK,KAAgB,EAEpF,MAEF,IAAK,UACH,GAAIR,EAA+B,CACjC,IAAMS,EAAS,SAASN,EAAU,MAAM,EAAE,EAAG,EAAE,EACzC,CAAE,cAAAO,EAAe,kBAAAC,EAAmB,WAAAC,CAAW,EAAIR,EAAI,qBAE7D,GAAIM,IAAkB,MAAMD,KAAYE,IAAsBD,EAC5D,MAAM,IAAI,MAAM,gGAAgGP,IAAY,EAG9H,GAAIS,IAAe,QAAaA,EAAaH,GAAU,EACrD,MAAM,IAAI,MAAM,4GAA4GN,IAAY,CAE5I,CACA,KACF,CAEJ",
  "names": ["require_asymmetricKeyDetailsSupported", "__commonJSMin", "exports", "module", "init_process", "init_buffer", "semver", "process", "require_rsaPssKeyDetailsSupported", "__commonJSMin", "exports", "module", "init_process", "init_buffer", "semver", "process", "require_validateAsymmetricKey", "__commonJSMin", "exports", "module", "init_process", "init_buffer", "ASYMMETRIC_KEY_DETAILS_SUPPORTED", "RSA_PSS_KEY_DETAILS_SUPPORTED", "allowedAlgorithmsForKeys", "allowedCurves", "algorithm", "key", "keyType", "allowedAlgorithms", "keyCurve", "allowedCurve", "length", "hashAlgorithm", "mgf1HashAlgorithm", "saltLength"]
}
